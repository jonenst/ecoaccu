{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","items","dates","_this2","fetch","then","res","json","result","console","log","forecast","map","x","marginalCarbonIntensity","setState","Date","datetime","getHours","data","labels","i","push","idx","min","tmpsum","j","chargestart","fillColor","strokeColor","chartData","datasets","react_default","a","createElement","Container","className","Row","Col","style","width","dist_default","percentage","text","react_chartjs","options","barValueSpacing","barDatasetSpacing","scaleShowGridLines","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2922a5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'react-circular-progressbar/dist/styles.css';\nimport CircularProgressbar from 'react-circular-progressbar';\nimport { Bar as BarChart } from 'react-chartjs';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      dates: []\n    };\n  }\n\n  componentDidMount() {\n    //fetch(\"https://api.electricitymap.org/v3/marginal-carbon-intensity/forecast?zone=FR\", { headers: { \"auth-token\": \"XXXXXXXXX\" } } )\n    fetch(\"https://le-simplex.mooo.com:8443/\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n        console.log(result.forecast.map(x => x.marginalCarbonIntensity));\n          this.setState({\n            isLoaded: true,\n            items: result.forecast.map(x => x.marginalCarbonIntensity),\n            dates: result.forecast.map(x => new Date(x.datetime).getHours()+\"h\")\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n\n        function rand(min, max, num) {\n          var rtn = [];\n          while (rtn.length < num) {\n            rtn.push((Math.random() * (max - min)) + min);\n          }\n          return rtn;\n        }\n\n    var labels = [];\n    for (var i=0;i<24;i++) {\n      labels.push((18+i)%24+\"h\");\n    }\n    \n    var data;\n    var dates;\n    if (this.state.isLoaded && !this.state.error) {\n      data = this.state.items;\n      dates = this.state.dates;\n    } else {\n      data = [80,70,60,58,55,53,50,48,37,35,35,34,\n              34,34,40,46,50,55,60,63,69,72,83,85];\n      dates = labels;\n    }\n\n    var chargelength = 5;\n    var idx;\n    var min=1e9;\n    for (var i = 2; i<22; i++) {\n      var tmpsum =0\n      if (dates[i+2] == \"8h\") {\n        break;\n      }\n      for (var j = -2; j<2; j++) {\n        tmpsum = tmpsum + data[i+j];\n      }\n      if (min > tmpsum) {\n        min = tmpsum;\n        idx = i;\n      }\n    }\n    var chargestart = idx-2;\n    var fillColor = [];\n    var strokeColor = [];\n    for (var i=0;i<24;i++) {\n      if (i < chargestart || i > chargestart + chargelength) {\n        fillColor.push(\"rgba(151,187,205,0.2)\");\n        strokeColor.push(\"rgba(151,187,205,1)\");\n      } else {\n        fillColor.push(\"rgba(0,200,0),0.2)\");\n        strokeColor.push(\"rgba(0,200,0,1)\");\n      }\n    }\n    let chartData = \n{\n            labels: dates,\n            datasets: [\n                {\n                    fillColor: fillColor ,\n                    strokeColor: strokeColor,\n                    data: data\n                }\n            ]\n          }\n;\n    let chartOptions = {\n  barValueSpacing : 0,\n  barDatasetSpacing : 1,\nscaleShowGridLines : false,\n    }\n\n    return (\n      <Container className=\"text-center\">\n        <Row>\n          <Col>\n            Charge\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <div className=\"mx-auto\" style={{ width: '100px' }}>\n              <CircularProgressbar percentage={73} text=\"73%\" />\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Row>\n              <Col>\n                Chargee dans\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                4h42\n              </Col>\n            </Row>\n          </Col>\n          <Col>\n            <Row>\n              <Col>\n                CO2 restant\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                20g (-60g)\n              </Col>\n            </Row>\n          </Col>\n          <Col>\n            <Row>\n              <Col>\n                Cout restant\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                2.35e\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <BarChart data={chartData} options={chartOptions} width=\"600\" height=\"250\"/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}